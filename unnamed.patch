Index: .idea/artifacts/TALSAPI_jar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/artifacts/TALSAPI_jar.xml	(date 1519390314567)
+++ .idea/artifacts/TALSAPI_jar.xml	(date 1519390314567)
@@ -0,0 +1,8 @@
+<component name="ArtifactManager">
+  <artifact type="jar" name="TALSAPI:jar">
+    <output-path>$PROJECT_DIR$/../../../../Servers/プラグインテスト/plugins</output-path>
+    <root id="archive" name="TALSAPI.jar">
+      <element id="module-output" name="TALSAPI" />
+    </root>
+  </artifact>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__com_google_code_gson_gson_2_8_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__com_google_code_gson_gson_2_8_0.xml	(date 1519390266775)
+++ .idea/libraries/Maven__com_google_code_gson_gson_2_8_0.xml	(date 1519390266775)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: com.google.code.gson:gson:2.8.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/code/gson/gson/2.8.0/gson-2.8.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/code/gson/gson/2.8.0/gson-2.8.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/code/gson/gson/2.8.0/gson-2.8.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__com_google_guava_guava_21_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__com_google_guava_guava_21_0.xml	(date 1519390266795)
+++ .idea/libraries/Maven__com_google_guava_guava_21_0.xml	(date 1519390266795)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: com.google.guava:guava:21.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/guava/guava/21.0/guava-21.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/guava/guava/21.0/guava-21.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/google/guava/guava/21.0/guava-21.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__com_googlecode_json_simple_json_simple_1_1_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__com_googlecode_json_simple_json_simple_1_1_1.xml	(date 1519390266819)
+++ .idea/libraries/Maven__com_googlecode_json_simple_json_simple_1_1_1.xml	(date 1519390266819)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: com.googlecode.json-simple:json-simple:1.1.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__commons_lang_commons_lang_2_6.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__commons_lang_commons_lang_2_6.xml	(date 1519390266843)
+++ .idea/libraries/Maven__commons_lang_commons_lang_2_6.xml	(date 1519390266843)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: commons-lang:commons-lang:2.6">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/commons-lang/commons-lang/2.6/commons-lang-2.6.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/commons-lang/commons-lang/2.6/commons-lang-2.6-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/commons-lang/commons-lang/2.6/commons-lang-2.6-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__javax_persistence_persistence_api_1_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__javax_persistence_persistence_api_1_0.xml	(date 1519461818394)
+++ .idea/libraries/Maven__javax_persistence_persistence_api_1_0.xml	(date 1519461818394)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: javax.persistence:persistence-api:1.0">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/javax/persistence/persistence-api/1.0/persistence-api-1.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/javax/persistence/persistence-api/1.0/persistence-api-1.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/javax/persistence/persistence-api/1.0/persistence-api-1.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__junit_junit_4_10.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__junit_junit_4_10.xml	(date 1519390267081)
+++ .idea/libraries/Maven__junit_junit_4_10.xml	(date 1519390267081)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: junit:junit:4.10">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.10/junit-4.10.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.10/junit-4.10-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.10/junit-4.10-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__net_md_5_bungeecord_chat_1_12_SNAPSHOT.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__net_md_5_bungeecord_chat_1_12_SNAPSHOT.xml	(date 1519633682190)
+++ .idea/libraries/Maven__net_md_5_bungeecord_chat_1_12_SNAPSHOT.xml	(date 1519633682190)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: net.md-5:bungeecord-chat:1.12-SNAPSHOT">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/net/md-5/bungeecord-chat/1.12-SNAPSHOT/bungeecord-chat-1.12-20180225.200137-69.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/net/md-5/bungeecord-chat/1.12-SNAPSHOT/bungeecord-chat-1.12-20180225.200137-69-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/net/md-5/bungeecord-chat/1.12-SNAPSHOT/bungeecord-chat-1.12-20180225.200137-69-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_avaje_ebean_2_8_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_avaje_ebean_2_8_1.xml	(date 1519461818422)
+++ .idea/libraries/Maven__org_avaje_ebean_2_8_1.xml	(date 1519461818422)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.avaje:ebean:2.8.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/avaje/ebean/2.8.1/ebean-2.8.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/avaje/ebean/2.8.1/ebean-2.8.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/avaje/ebean/2.8.1/ebean-2.8.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_bukkit_bukkit_1_10_2_R0_1_SNAPSHOT.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_bukkit_bukkit_1_10_2_R0_1_SNAPSHOT.xml	(date 1519461818445)
+++ .idea/libraries/Maven__org_bukkit_bukkit_1_10_2_R0_1_SNAPSHOT.xml	(date 1519461818445)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.bukkit:bukkit:1.10.2-R0.1-SNAPSHOT">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/bukkit/bukkit/1.10.2-R0.1-SNAPSHOT/bukkit-1.10.2-R0.1-20161106.012225-93.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/bukkit/bukkit/1.10.2-R0.1-SNAPSHOT/bukkit-1.10.2-R0.1-20161106.012225-93-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/bukkit/bukkit/1.10.2-R0.1-SNAPSHOT/bukkit-1.10.2-R0.1-20161106.012225-93-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_hamcrest_hamcrest_core_1_1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_hamcrest_hamcrest_core_1_1.xml	(date 1519390267177)
+++ .idea/libraries/Maven__org_hamcrest_hamcrest_core_1_1.xml	(date 1519390267177)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.hamcrest:hamcrest-core:1.1">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.1/hamcrest-core-1.1.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.1/hamcrest-core-1.1-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.1/hamcrest-core-1.1-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_spigotmc_spigot_api_1_12_R0_1_SNAPSHOT.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_spigotmc_spigot_api_1_12_R0_1_SNAPSHOT.xml	(date 1519400503456)
+++ .idea/libraries/Maven__org_spigotmc_spigot_api_1_12_R0_1_SNAPSHOT.xml	(date 1519400503456)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.spigotmc:spigot-api:1.12-R0.1-SNAPSHOT">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/spigotmc/spigot-api/1.12-R0.1-SNAPSHOT/spigot-api-1.12-R0.1-20170803.111256-74.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/spigotmc/spigot-api/1.12-R0.1-SNAPSHOT/spigot-api-1.12-R0.1-20170803.111256-74-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/spigotmc/spigot-api/1.12-R0.1-SNAPSHOT/spigot-api-1.12-R0.1-20170803.111256-74-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_yaml_snakeyaml_1_18.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_yaml_snakeyaml_1_18.xml	(date 1519400503481)
+++ .idea/libraries/Maven__org_yaml_snakeyaml_1_18.xml	(date 1519400503481)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.yaml:snakeyaml:1.18">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/yaml/snakeyaml/1.18/snakeyaml-1.18.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/yaml/snakeyaml/1.18/snakeyaml-1.18-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/yaml/snakeyaml/1.18/snakeyaml-1.18-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/spigot.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/spigot.xml	(date 1519390412969)
+++ .idea/libraries/spigot.xml	(date 1519390412969)
@@ -0,0 +1,11 @@
+<component name="libraryTable">
+  <library name="spigot">
+    <CLASSES>
+      <root url="jar://$PROJECT_DIR$/../../../../Servers/プラグインテスト/spigot.jar!/" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES>
+      <root url="jar://$PROJECT_DIR$/../../../../Servers/プラグインテスト/spigot.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/spigot1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/spigot1.xml	(date 1519390412989)
+++ .idea/libraries/spigot1.xml	(date 1519390412989)
@@ -0,0 +1,11 @@
+<component name="libraryTable">
+  <library name="spigot1">
+    <CLASSES>
+      <root url="jar://$PROJECT_DIR$/../../../../Servers/プラグインテスト/spigot.jar!/" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES>
+      <root url="jar://$PROJECT_DIR$/../../../../Servers/プラグインテスト/spigot.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(date 1519390266721)
+++ .idea/compiler.xml	(date 1519390266721)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile name="Maven default annotation processors profile" enabled="true">
+        <sourceOutputDir name="target/generated-sources/annotations" />
+        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
+        <outputRelativeToContentRoot value="true" />
+        <module name="TALSAPI" />
+      </profile>
+    </annotationProcessing>
+    <bytecodeTargetLevel>
+      <module name="TALSAPI" target="1.8" />
+    </bytecodeTargetLevel>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/encodings.xml	(date 1519390266743)
+++ .idea/encodings.xml	(date 1519390266743)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(date 1519390266683)
+++ .idea/misc.xml	(date 1519390266683)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="EntryPointsManager">
+    <list size="1">
+      <item index="0" class="java.lang.String" itemvalue="org.bukkit.event.EventHandler" />
+    </list>
+  </component>
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_9" default="true" project-jdk-name="9.0" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(date 1519390186105)
+++ .idea/modules.xml	(date 1519390186105)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/TALSAPI.iml" filepath="$PROJECT_DIR$/TALSAPI.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/uiDesigner.xml	(date 1519440945289)
+++ .idea/uiDesigner.xml	(date 1519440945289)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(date 1519991223108)
+++ .idea/vcs.xml	(date 1519991223108)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/talsapi/talsapi/api/classes/ClassInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/api/classes/ClassInfo.java	(date 1519641724287)
+++ src/main/java/talsapi/talsapi/api/classes/ClassInfo.java	(date 1519641724287)
@@ -0,0 +1,61 @@
+package talsapi.talsapi.api.classes;
+
+import org.bukkit.entity.Player;
+import talsapi.talsapi.api.manager.ClassManager;
+import talsapi.talsapi.api.manager.enums.Classes;
+import talsapi.talsapi.api.manager.enums.Skill;
+import talsapi.talsapi.api.manager.enums.Stats;
+
+public class ClassInfo {
+
+    private Player p;
+    private Classes classes;
+
+    public ClassInfo(Player p,Classes classes)
+    {
+        this.classes = classes;
+        this.p = p;
+    }
+
+    //レベルを設定
+    public void setLevel(int level) { new ClassManager(p).setLevel(classes, level); }
+
+    //LEVELを取得
+    public int getLevel() {return new ClassManager(p).getLevel(classes);}
+
+    //EXP設定
+    public void setExp(double exp){ new ClassManager(p).setExp(classes, exp); }
+
+    //EXP取得
+    public double getExp() {return new ClassManager(p).getEXP(classes);}
+
+    //STATS
+    public ClassInfoStats getStats(Stats stats) {return new ClassInfoStats(p,stats,classes);}
+
+    //SKILL
+    public ClassInfoSkills getSkill(Skill skill) {return new ClassInfoSkills(p,skill,classes);}
+
+    //MPの設定
+    public void setMaxMP(int mp){new ClassManager(p).setMaxMP(classes, mp);}
+
+    //MP
+    public int getMaxMP() {return new ClassManager(p).getMaxMP(classes);}
+
+    //MAXヘルスの設定
+    public void setMaxHealth(double health){new ClassManager(p).setMaxHealth(classes, health);}
+
+    //MAXヘルスの取得
+    public double getMaxHealth() {return new ClassManager(p).getMaxHealth(classes);}
+
+    //SPの設定
+    public void setSP(int SP){new ClassManager(p).setSP(classes, SP);}
+
+    //SPの取得
+    public int getSP() {return new ClassManager(p).getSP(classes);}
+
+    //NEXTEXPの取得
+    public double getNextExp() {return new ClassManager(p).getNextExp(classes);}
+
+    //クラスの名前を取得
+    public String getPrefix() {return new ClassManager(p).getPrefix(classes);}
+}
Index: src/main/java/talsapi/talsapi/api/classes/ClassInfoSkills.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/api/classes/ClassInfoSkills.java	(date 1519641630566)
+++ src/main/java/talsapi/talsapi/api/classes/ClassInfoSkills.java	(date 1519641630566)
@@ -0,0 +1,82 @@
+package talsapi.talsapi.api.classes;
+
+import org.bukkit.entity.Player;
+import talsapi.talsapi.MySQLs;
+import talsapi.talsapi.api.manager.enums.Classes;
+import talsapi.talsapi.api.manager.enums.Skill;
+import talsapi.talsapi.api.manager.enums.Stats;
+
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+public class ClassInfoSkills {
+
+    private Player p;
+    private Skill skill;
+    private Classes classes;
+
+    ClassInfoSkills(Player p, Skill skill, Classes classes)
+    {
+        this.p = p;
+        this.skill = skill;
+        this.classes = classes;
+    }
+
+    public void setSkillLevel(int level)
+    {
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "UPDATE "+classes.getName()+" SET "+skill.getSkillLevelMySQL()+"=? WHERE UUID=?");
+            statment.setString(2,p.getUniqueId().toString());
+            statment.setInt(1,level);
+            statment.executeUpdate();
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public int getSkillLevel()
+    {
+        if(classes.getClasses() == 0)
+        {
+            return 0;
+        }
+
+        //CLASSを入手
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM " + classes.getName() + " WHERE UUID=?");
+            statment.setString(1,p.getUniqueId().toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            return results.getInt(skill.getSkillLevelMySQL());
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        return 0;
+    }
+
+    public boolean hasSkill()
+    {
+        if(classes.getClasses() == 0)
+        {
+            return false;
+        }
+
+        //CLASSを入手
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM " + classes.getName() + " WHERE UUID=?");
+            statment.setString(1,p.getUniqueId().toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            return results.getBoolean(skill.getSkillMySQL());
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        return false;
+    }
+}
Index: src/main/java/talsapi/talsapi/api/classes/ClassInfoStats.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/api/classes/ClassInfoStats.java	(date 1519641251548)
+++ src/main/java/talsapi/talsapi/api/classes/ClassInfoStats.java	(date 1519641251548)
@@ -0,0 +1,67 @@
+package talsapi.talsapi.api.classes;
+
+import org.bukkit.entity.Player;
+import talsapi.talsapi.MySQLs;
+import talsapi.talsapi.api.manager.enums.Classes;
+import talsapi.talsapi.api.manager.enums.Stats;
+
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+public class ClassInfoStats {
+
+    private Player p;
+    private Stats stats;
+    private Classes classes;
+
+    ClassInfoStats(Player p, Stats stats, Classes classes)
+    {
+        this.p = p;
+        this.stats = stats;
+        this.classes = classes;
+    }
+
+    public void setStats(int sp)
+    {
+
+        if(classes.getClasses() == 0)
+        {
+            return;
+        }
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "UPDATE "+classes.getName()+" SET "+stats.getName()+"=? WHERE UUID=?");
+            statment.setString(2,p.getUniqueId().toString());
+            statment.setInt(1,sp);
+            statment.executeUpdate();
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public int getStats()
+    {
+
+        if(classes.getClasses() == 0)
+        {
+            return 0;
+        }
+
+        //CLASSを入手
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM " + classes.getName() + " WHERE UUID=?");
+            statment.setString(1,p.getUniqueId().toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            return results.getInt(stats.getName());
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        return 0;
+    }
+
+}
Index: src/main/java/talsapi/talsapi/api/classes/MainClass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/api/classes/MainClass.java	(date 1519639440853)
+++ src/main/java/talsapi/talsapi/api/classes/MainClass.java	(date 1519639440853)
@@ -0,0 +1,59 @@
+package talsapi.talsapi.api.classes;
+
+import org.bukkit.entity.Player;
+import talsapi.talsapi.api.manager.ClassManager;
+import talsapi.talsapi.api.manager.PlayerManager;
+import talsapi.talsapi.api.manager.enums.Skill;
+import talsapi.talsapi.api.manager.enums.Stats;
+
+public class MainClass {
+
+    private Player p;
+
+    public MainClass(Player p)
+    {
+        this.p = p;
+    }
+
+    //レベルを設定
+    public void setLevel(int level) { new ClassManager(p).setLevel(new PlayerManager(p).getClasses(), level); }
+
+    //LEVELを取得
+    public int getLevel() {return new ClassManager(p).getLevel(new PlayerManager(p).getClasses());}
+
+    //EXP設定
+    public void setExp(double exp){ new ClassManager(p).setExp(new PlayerManager(p).getClasses(), exp); }
+
+    //EXP取得
+    public double getExp() {return new ClassManager(p).getEXP(new PlayerManager(p).getClasses());}
+
+    //STATS
+    public MainClassStats getStats(Stats stats) {return new MainClassStats(p,stats,new PlayerManager(p).getClasses());}
+
+    //SKILL
+    public MainClassSkills getSkill(Skill skill) {return new MainClassSkills(p,skill,new PlayerManager(p).getClasses());}
+
+    //MPの設定
+    public void setMaxMP(int mp){new ClassManager(p).setMaxMP(new PlayerManager(p).getClasses(), mp);}
+
+    //MP
+    public int getMaxMP() {return new ClassManager(p).getMaxMP(new PlayerManager(p).getClasses());}
+
+    //MAXヘルスの設定
+    public void setMaxHealth(double health){new ClassManager(p).setMaxHealth(new PlayerManager(p).getClasses(), health);}
+
+    //MAXヘルスの取得
+    public double getMaxHealth() {return new ClassManager(p).getMaxHealth(new PlayerManager(p).getClasses());}
+
+    //SPの設定
+    public void setSP(int SP){new ClassManager(p).setSP(new PlayerManager(p).getClasses(), SP);}
+
+    //SPの取得
+    public int getSP() {return new ClassManager(p).getSP(new PlayerManager(p).getClasses());}
+
+    //NEXTEXPの取得
+    public double getNextExp() {return new ClassManager(p).getNextExp(new PlayerManager(p).getClasses());}
+
+    //クラスの名前を取得
+    public String getPrefix() {return new ClassManager(p).getPrefix(new PlayerManager(p).getClasses());}
+}
Index: src/main/java/talsapi/talsapi/api/classes/MainClassSkills.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/api/classes/MainClassSkills.java	(date 1519641630544)
+++ src/main/java/talsapi/talsapi/api/classes/MainClassSkills.java	(date 1519641630544)
@@ -0,0 +1,81 @@
+package talsapi.talsapi.api.classes;
+
+import org.bukkit.entity.Player;
+import talsapi.talsapi.MySQLs;
+import talsapi.talsapi.api.manager.enums.Classes;
+import talsapi.talsapi.api.manager.enums.Skill;
+import talsapi.talsapi.api.manager.enums.Stats;
+
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+public class MainClassSkills {
+    private Skill skill;
+    private Player p;
+    private Classes classes;
+
+    MainClassSkills(Player p, Skill skill, Classes classes)
+    {
+        this.p = p;
+        this.skill = skill;
+        this.classes = classes;
+    }
+
+    public void setSkillLevel(int level)
+    {
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "UPDATE "+classes.getName()+" SET "+skill.getSkillLevelMySQL()+"=? WHERE UUID=?");
+            statment.setString(2,p.getUniqueId().toString());
+            statment.setInt(1,level);
+            statment.executeUpdate();
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public int getSkillLevel()
+    {
+        if(classes.getClasses() == 0)
+        {
+            return 0;
+        }
+
+        //CLASSを入手
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM " + classes.getName() + " WHERE UUID=?");
+            statment.setString(1,p.getUniqueId().toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            return results.getInt(skill.getSkillLevelMySQL());
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        return 0;
+    }
+
+    public boolean hasSkill()
+    {
+        if(classes.getClasses() == 0)
+        {
+            return false;
+        }
+
+        //CLASSを入手
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM " + classes.getName() + " WHERE UUID=?");
+            statment.setString(1,p.getUniqueId().toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            return results.getBoolean(skill.getSkillMySQL());
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        return false;
+    }
+}
Index: src/main/java/talsapi/talsapi/api/classes/MainClassStats.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/api/classes/MainClassStats.java	(date 1519640928697)
+++ src/main/java/talsapi/talsapi/api/classes/MainClassStats.java	(date 1519640928697)
@@ -0,0 +1,54 @@
+package talsapi.talsapi.api.classes;
+
+import org.bukkit.entity.Player;
+import talsapi.talsapi.MySQLs;
+import talsapi.talsapi.api.manager.enums.Classes;
+import talsapi.talsapi.api.manager.enums.Stats;
+
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+public class MainClassStats {
+
+    private Player p;
+    private Stats stats;
+    private Classes classes;
+
+    MainClassStats(Player p, Stats stats, Classes classes)
+    {
+        this.p = p;
+        this.stats = stats;
+        this.classes = classes;
+    }
+
+    public void setStats(int sp)
+    {
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "UPDATE "+classes.getName()+" SET "+stats.getName()+"=? WHERE UUID=?");
+            statment.setString(2,p.getUniqueId().toString());
+            statment.setInt(1,sp);
+            statment.executeUpdate();
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public int getStats()
+    {
+        //CLASSを入手
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM " + classes.getName() + " WHERE UUID=?");
+            statment.setString(1,p.getUniqueId().toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            return results.getInt(stats.getName());
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        return 0;
+    }
+}
Index: src/main/java/talsapi/talsapi/api/event/TALSClassChangeEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/api/event/TALSClassChangeEvent.java	(date 1519651122043)
+++ src/main/java/talsapi/talsapi/api/event/TALSClassChangeEvent.java	(date 1519651122043)
@@ -0,0 +1,29 @@
+package talsapi.talsapi.api.event;
+
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.bukkit.entity.Player;
+
+public class TALSClassChangeEvent extends Event {
+
+    Player p;
+
+    public TALSClassChangeEvent(Player p) {
+        this.p = p;
+    }
+
+    private static final HandlerList handlers = new HandlerList();
+
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    public Player getPlayer()
+    {
+        return p;
+    }
+}
Index: src/main/java/talsapi/talsapi/api/event/TALSExpChangeEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/api/event/TALSExpChangeEvent.java	(date 1519651122026)
+++ src/main/java/talsapi/talsapi/api/event/TALSExpChangeEvent.java	(date 1519651122026)
@@ -0,0 +1,29 @@
+package talsapi.talsapi.api.event;
+
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.bukkit.entity.Player;
+
+public class TALSExpChangeEvent extends Event {
+
+    Player p;
+
+    public TALSExpChangeEvent(Player p) {
+        this.p = p;
+    }
+
+    private static final HandlerList handlers = new HandlerList();
+
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    public Player getPlayer()
+    {
+        return p;
+    }
+}
Index: src/main/java/talsapi/talsapi/api/event/TALSLevelChangeEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/api/event/TALSLevelChangeEvent.java	(date 1519651121993)
+++ src/main/java/talsapi/talsapi/api/event/TALSLevelChangeEvent.java	(date 1519651121993)
@@ -0,0 +1,29 @@
+package talsapi.talsapi.api.event;
+
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.bukkit.entity.Player;
+
+public class TALSLevelChangeEvent extends Event {
+
+    Player p;
+
+    public TALSLevelChangeEvent(Player p) {
+        this.p = p;
+    }
+
+    private static final HandlerList handlers = new HandlerList();
+
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    public Player getPlayer()
+    {
+        return p;
+    }
+}
Index: src/main/java/talsapi/talsapi/api/manager/enums/Classes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/api/manager/enums/Classes.java	(date 1519476552428)
+++ src/main/java/talsapi/talsapi/api/manager/enums/Classes.java	(date 1519476552428)
@@ -0,0 +1,33 @@
+package talsapi.talsapi.api.manager.enums;
+
+import talsapi.talsapi.mysql.Guardian;
+
+public enum Classes {
+
+    NONE(0,"none"),
+    SOLDIER(1,"Soldier"),
+    WIZARD(2,"Wizard"),
+    GUARDIAN(3,"Guardian"),
+    THIEF(4,"Thief"),
+    HUNTER(5,"Hunter"),
+    ASSASSIN(6,"Assassin"),
+    NECROMANCER(7,"Necromancer"),
+    PRIEST(8,"priest");
+
+    private int classes;
+    private String name;
+
+    Classes(int i,String name) {
+        classes = i;
+        this.name = name;
+    }
+
+    public int getClasses()
+    {
+        return classes;
+    }
+    public String getName()
+    {
+        return name;
+    }
+}
Index: src/main/java/talsapi/talsapi/api/manager/enums/Skill.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/api/manager/enums/Skill.java	(date 1519633681924)
+++ src/main/java/talsapi/talsapi/api/manager/enums/Skill.java	(date 1519633681924)
@@ -0,0 +1,32 @@
+package talsapi.talsapi.api.manager.enums;
+
+public enum Skill {
+
+    Skill1("Skill1","SkillLevel1"),
+    Skill2("Skill2","SkillLevel2"),
+    Skill3("Skill3","SkillLevel3"),
+    Skill4("Skill4","SkillLevel4"),
+    Skill5("Skill5","SkillLevel5"),
+    Skill6("Skill6","SkillLevel6"),
+    Skill7("Skill7","SkillLevel7"),
+    Skill8("Skill8","SkillLevel8"),
+    Skill9("Skill9","SkillLevel9"),
+    Skill10("Skill10","SkillLevel10");
+
+    private String skill,skillLevel;
+
+    Skill(String skill, String skillLevel) {
+        this.skill = skill;
+        this.skillLevel = skillLevel;
+    }
+
+    public String getSkillMySQL()
+    {
+        return skill;
+    }
+
+    public String getSkillLevelMySQL()
+    {
+        return skillLevel;
+    }
+}
Index: src/main/java/talsapi/talsapi/api/manager/enums/Stats.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/api/manager/enums/Stats.java	(date 1519519466695)
+++ src/main/java/talsapi/talsapi/api/manager/enums/Stats.java	(date 1519519466695)
@@ -0,0 +1,21 @@
+package talsapi.talsapi.api.manager.enums;
+
+public enum Stats {
+    MaxMP("StatsMaxMP"),
+    MaxHealth("StatsMaxHealth"),
+    AttackDamage("StatsAttackDamage"),
+    SkillDamage("StatsSkillDamage"),
+    Speed("StatsSpeed");
+
+    private String s;
+
+    Stats(String name)
+    {
+        s=name;
+    }
+
+    public String getName()
+    {
+        return s;
+    }
+}
Index: src/main/java/talsapi/talsapi/api/manager/ClassManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/api/manager/ClassManager.java	(date 1519981396863)
+++ src/main/java/talsapi/talsapi/api/manager/ClassManager.java	(date 1519981396863)
@@ -0,0 +1,247 @@
+package talsapi.talsapi.api.manager;
+
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import talsapi.talsapi.MySQLs;
+import talsapi.talsapi.api.event.TALSExpChangeEvent;
+import talsapi.talsapi.api.event.TALSLevelChangeEvent;
+import talsapi.talsapi.api.manager.enums.Classes;
+
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+public class ClassManager {
+    private Player p;
+
+    public ClassManager(Player p)
+    {
+        this.p = p;
+    }
+
+    public void setExp(Classes classes,double exp)
+    {
+
+        if(classes.getClasses() == 0)
+        {
+            return;
+        }
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "UPDATE "+classes.getName()+" SET EXP=? WHERE UUID=?");
+            statment.setString(2,p.getUniqueId().toString());
+            statment.setDouble(1,exp);
+            statment.executeUpdate();
+            Bukkit.getServer().getPluginManager().callEvent(new TALSExpChangeEvent(p));
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public double getEXP(Classes classes)
+    {
+
+        if(classes.getClasses() ==0)
+        {
+            return 0;
+        }
+
+        //SPを取得
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM " + classes.getName() + " WHERE UUID=?");
+            statment.setString(1,p.getUniqueId().toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            return results.getInt("EXP");
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+        return 0.0;
+    }
+
+
+    public void setLevel(Classes classes,int level)
+    {
+        if(classes.getClasses() == 0)
+        {
+            return;
+        }
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "UPDATE "+classes.getName()+" SET LEVEL=? WHERE UUID=?");
+            statment.setString(2,p.getUniqueId().toString());
+            statment.setInt(1,level);
+            Bukkit.getServer().getPluginManager().callEvent(new TALSLevelChangeEvent(p));
+            statment.executeUpdate();
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public int getLevel(Classes classes)
+    {
+
+        if(classes.getClasses() ==0)
+        {
+            return 0;
+        }
+
+        //SPを取得
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM " + classes.getName() + " WHERE UUID=?");
+            statment.setString(1,p.getUniqueId().toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            return results.getInt("LEVEL");
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+        return 0;
+    }
+
+
+    public void setMaxMP(Classes classes, int arg1)
+    {
+        if(classes.getClasses() == 0)
+        {
+            return;
+        }
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "UPDATE "+classes.getName()+" SET MAXMP=? WHERE UUID=?");
+            statment.setString(2,p.getUniqueId().toString());
+            statment.setInt(1,arg1);
+            statment.executeUpdate();
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public int getMaxMP(Classes classes)
+    {
+
+        if(classes.getClasses() ==0)
+        {
+            return 0;
+        }
+
+        //SPを取得
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM " + classes.getName() + " WHERE UUID=?");
+            statment.setString(1,p.getUniqueId().toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            return results.getInt("MAXMP");
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+        return 0;
+    }
+
+
+    public void setMaxHealth(Classes classes, double arg1)
+    {
+        if(classes.getClasses() == 0)
+        {
+            return;
+        }
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "UPDATE "+classes.getName()+" SET MAXHEALTH=? WHERE UUID=?");
+            statment.setString(2,p.getUniqueId().toString());
+            statment.setDouble(1,arg1);
+            statment.executeUpdate();
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public double getMaxHealth(Classes classes)
+    {
+
+        if(classes.getClasses() ==0)
+        {
+            return 0;
+        }
+
+        //SPを取得
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM " + classes.getName() + " WHERE UUID=?");
+            statment.setString(1,p.getUniqueId().toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            return results.getInt("MAXHEALTH");
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+        return 0;
+    }
+
+    public void setSP(Classes classes, int arg1)
+    {
+        if(classes.getClasses() == 0)
+        {
+            return;
+        }
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "UPDATE "+classes.getName()+" SET SP=? WHERE UUID=?");
+            statment.setString(2,p.getUniqueId().toString());
+            statment.setInt(1,arg1);
+            statment.executeUpdate();
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public int getSP(Classes classes)
+    {
+
+        if(classes.getClasses() ==0)
+        {
+            return 0;
+        }
+
+        //SPを取得
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM " + classes.getName() + " WHERE UUID=?");
+            statment.setString(1,p.getUniqueId().toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            return results.getInt("SP");
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+        return 0;
+    }
+
+    public double getNextExp(Classes classes)
+    {
+        if(classes.getClasses() ==0)
+        {
+            return 0;
+        }
+
+        return (double) (((getLevel(classes)+60)*2+(getLevel(classes)*getLevel(classes)))*2);
+    }
+
+    public String getPrefix(Classes classes)
+    {
+        if(classes.getClasses() == 1) return "§7§l⚔§f§lソルジャー";//ソルジャー
+        if(classes.getClasses() == 2) return "§4§l۞§c§lウィザード";//ウィザード
+        if(classes.getClasses() == 3) return "§1§l◆§3§lガーディアン";//ガーディアン
+        if(classes.getClasses() == 4) return "§2§l⚷§a§lシーフ";//チーフ
+        if(classes.getClasses() == 5) return "§6✛§e§lハンター";//ハンター
+        if(classes.getClasses() == 6) return "§8§l§m━]§7§l§m━§f§l§m━ §4§lアサシン";//アサシン
+        if(classes.getClasses() == 7) return "§5§l☪§d§lネクロマンサー";//ネクロマンサー
+        if(classes.getClasses() == 8) return "§3§l✞§b§lプリースト";//プリースト
+
+        return "§c§l⃠§6§lアドベンチャー";
+    }
+}
Index: src/main/java/talsapi/talsapi/api/manager/PlayerManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/api/manager/PlayerManager.java	(date 1519651122010)
+++ src/main/java/talsapi/talsapi/api/manager/PlayerManager.java	(date 1519651122010)
@@ -0,0 +1,62 @@
+package talsapi.talsapi.api.manager;
+
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import talsapi.talsapi.MySQLs;
+import talsapi.talsapi.api.event.TALSClassChangeEvent;
+import talsapi.talsapi.api.manager.enums.Classes;
+
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+public class PlayerManager {
+    private Player p;
+    private String table = "PlayerDeta";
+
+    public PlayerManager(Player p)
+    {
+        this.p = p;
+    }
+
+    public void changeClasses(int change)
+    {
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "UPDATE "+table+" SET CLASS=? WHERE UUID=?");
+            statment.setString(2,p.getUniqueId().toString());
+            statment.setInt(1,change);
+            statment.executeUpdate();
+            Bukkit.getServer().getPluginManager().callEvent(new TALSClassChangeEvent(p));
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public Classes getClasses()
+    {
+        int classes = 0;
+        //CLASSを入手
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM " + table + " WHERE UUID=?");
+            statment.setString(1,p.getUniqueId().toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            classes = results.getInt("CLASS");
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+        if(classes == 0) return Classes.NONE;
+        if(classes == 1) return Classes.SOLDIER;//ソルジャー
+        if(classes == 2) return Classes.WIZARD;//ウィザード
+        if(classes == 3) return Classes.GUARDIAN;//ガーディアン
+        if(classes == 4) return Classes.THIEF;//チーフ
+        if(classes == 5) return Classes.HUNTER;//ハンター
+        if(classes == 6) return Classes.ASSASSIN;//アサシン
+        if(classes == 7) return Classes.NECROMANCER;//ネクロマンサー
+        if(classes == 8) return Classes.PRIEST;//プリ―ト
+
+        return Classes.NONE;
+    }
+}
Index: src/main/java/talsapi/talsapi/api/MySQLAPI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/api/MySQLAPI.java	(date 1519464049078)
+++ src/main/java/talsapi/talsapi/api/MySQLAPI.java	(date 1519464049078)
@@ -0,0 +1,19 @@
+package talsapi.talsapi.api;
+
+import talsapi.talsapi.mysql.*;
+
+public class MySQLAPI {
+
+    public MySQLAPI()
+    {
+    }
+
+    public Assassin getAssassin() { return new Assassin(); }
+    public Guardian getGuardian() { return new Guardian(); }
+    public Hunter getHunter() { return new Hunter(); }
+    public Necromancer getNecromancer() { return new Necromancer(); }
+    public Priest getPriest() { return new Priest(); }
+    public Soldier getSoldier() { return new Soldier(); }
+    public Thief geThief() { return new Thief(); }
+    public Wizard getWizard() { return new Wizard(); }
+}
Index: src/main/java/talsapi/talsapi/api/PlayerDeta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/api/PlayerDeta.java	(date 1519636732303)
+++ src/main/java/talsapi/talsapi/api/PlayerDeta.java	(date 1519636732303)
@@ -0,0 +1,25 @@
+package talsapi.talsapi.api;
+
+import org.bukkit.entity.Player;
+import talsapi.talsapi.api.classes.ClassInfo;
+import talsapi.talsapi.api.classes.MainClass;
+import talsapi.talsapi.api.manager.PlayerManager;
+import talsapi.talsapi.api.manager.enums.Classes;
+
+public class PlayerDeta {
+
+    private Player p;
+
+    public PlayerDeta(Player p)
+    {
+        this.p = p;
+    }
+
+    public MainClass getMainClass() { return new MainClass(p); }
+
+    public void setClasses(Classes change){ new PlayerManager(p).changeClasses(change.getClasses()); }
+
+    public Classes getClasses() { return new PlayerManager(p).getClasses(); }
+
+    public ClassInfo getClassInfo(Classes classes) { return new ClassInfo(p,classes);}
+}
Index: src/main/java/talsapi/talsapi/listener/PlayerJoinSet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/listener/PlayerJoinSet.java	(date 1519549445380)
+++ src/main/java/talsapi/talsapi/listener/PlayerJoinSet.java	(date 1519549445380)
@@ -0,0 +1,31 @@
+package talsapi.talsapi.listener;
+
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.entity.EntityDeathEvent;
+import org.bukkit.event.player.PlayerAdvancementDoneEvent;
+import org.bukkit.event.player.PlayerInteractEvent;
+import org.bukkit.event.player.PlayerJoinEvent;
+import talsapi.talsapi.MySQLs;
+import talsapi.talsapi.TALSAPI;
+import talsapi.talsapi.api.PlayerDeta;
+import talsapi.talsapi.api.classes.MainClass;
+import talsapi.talsapi.api.manager.enums.Classes;
+import org.bukkit.entity.Player;
+import talsapi.talsapi.api.manager.enums.Stats;
+
+public class PlayerJoinSet implements Listener{
+    TALSAPI plugin = TALSAPI.getPlugin(TALSAPI.class);
+
+    public PlayerJoinSet ()
+    {
+        plugin.getServer().getPluginManager().registerEvents(this, plugin);
+    }
+
+    @EventHandler
+    public void onJoin(PlayerJoinEvent e)
+    {
+        Player p = e.getPlayer();
+        MySQLs.createPlayreDetas(e.getPlayer());
+    }
+}
Index: src/main/java/talsapi/talsapi/mysql/Assassin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/mysql/Assassin.java	(date 1519563976667)
+++ src/main/java/talsapi/talsapi/mysql/Assassin.java	(date 1519563976667)
@@ -0,0 +1,165 @@
+package talsapi.talsapi.mysql;
+
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import talsapi.talsapi.MySQLs;
+import talsapi.talsapi.TALSAPI;
+
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.UUID;
+
+public class Assassin {
+    TALSAPI plugin = TALSAPI.getPlugin(TALSAPI.class);
+    String prefix = "§e≪§cT§6A§aL§bS §9API§e≫ ";
+    private String table = "Assassin";
+
+    //テーブル
+    public void setTable()
+    {
+        try {
+            //Detabase設定をしていない場合の処理
+            if(MySQLs.getConnection() == null)
+            {
+                return;
+            }
+
+            //テーブルを作る
+            PreparedStatement statement = MySQLs.getConnection().prepareStatement("USE "+ MySQLs.getDetabase());
+            statement.executeUpdate("CREATE TABLE IF NOT EXISTS `"+table+"` (" +
+                    "`UUID` TEXT," +
+                    "`Level` int," +
+                    "`Exp` double," +
+                    "`MaxHealth` double," +
+                    "`MaxMP` int," +
+                    "`SP` int," +
+                    "`StatsMaxHealth` int," +
+                    "`StatsMaxMP` int," +
+                    "`StatsAttackDamage` int," +
+                    "`StatsSkillDamage` int," +
+                    "`StatsSpeed` int," +
+                    "`skill1` boolean,"+
+                    "`skillLevel1` int,"+
+                    "`skill2` boolean,"+
+                    "`skillLevel2` int,"+
+                    "`skill3` boolean,"+
+                    "`skillLevel3` int,"+
+                    "`skill4` boolean,"+
+                    "`skillLevel4` int,"+
+                    "`skill5` boolean,"+
+                    "`skillLevel5` int,"+
+                    "`skill6` boolean,"+
+                    "`skillLevel6` int,"+
+                    "`skill7` boolean,"+
+                    "`skillLevel7` int,"+
+                    "`skill8` boolean,"+
+                    "`skillLevel8` int,"+
+                    "`skill9` boolean,"+
+                    "`skillLevel9` int,"+
+                    "`skill10` boolean,"+
+                    "`skillLevel10` int"+
+                    ")");
+
+            Bukkit.getConsoleSender().sendMessage(prefix+"§aLoad "+table+" TABLE");
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    //プレイやデータが損座しているか
+    private boolean playerExists(Player p)
+    {
+
+        UUID uuid = p.getUniqueId();
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement("SELECT * FROM "+table+" WHERE UUID=?");
+            statment.setString(1,uuid.toString());
+
+            ResultSet results = statment.executeQuery();
+            if(results.next())
+            {
+                return true;
+            }
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        return false;
+    }
+
+    //プレイヤーデータを作成
+    public void createPlayerDeta(Player p)
+    {
+        UUID uuid = p.getUniqueId();
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM "+table+" WHERE UUID=?");
+            statment.setString(1, uuid.toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            if(!playerExists(p))
+            {
+                //LOAD
+                PreparedStatement insert = MySQLs.getConnection().prepareStatement(
+                        "INSERT INTO " + table + "(UUID,Level,Exp,MaxHealth,MaxMP,SP," +
+                                "StatsMaxHealth,StatsMaxMP,StatsSkillDamage,StatsAttackDamage,StatsSpeed,"+
+                                "Skill1,SkillLevel1," +
+                                "Skill2,SkillLevel2," +
+                                "Skill3,SkillLevel3," +
+                                "Skill4,SkillLevel4," +
+                                "Skill5,SkillLevel5," +
+                                "Skill6,SkillLevel6," +
+                                "Skill7,SkillLevel7," +
+                                "Skill8,SkillLevel8," +
+                                "Skill9,SkillLevel9," +
+                                "Skill10,SkillLevel10)" +
+                                " VALUE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
+                //セット
+                insert.setString(1,uuid.toString());//UUID
+                insert.setInt(2,1);//LEVEL
+                insert.setDouble(3,0.0);//EXP
+                insert.setDouble(4,20.0);//MAXHealth
+                insert.setInt(5,10);//MAX MP
+                insert.setInt(6,0);//SP
+                insert.setInt(7,0);//ADD HP
+                insert.setInt(8,0);//ADD MP
+                insert.setInt(9,0);//ADD SKILL DAMAGE
+                insert.setInt(10,0);//ADD ATTACK DAMAGE
+                insert.setInt(11,0);//ADD SPEED
+
+                insert.setBoolean(12,false);//1
+                insert.setBoolean(14,false);//2
+                insert.setBoolean(16,false);//3
+                insert.setBoolean(18,false);//4
+                insert.setBoolean(20,false);//5
+                insert.setBoolean(22,false);//6
+                insert.setBoolean(24,false);//7
+                insert.setBoolean(26,false);//8
+                insert.setBoolean(28,false);//9
+                insert.setBoolean(30,false);//10
+
+                insert.setInt(13,1);//1
+                insert.setInt(15,1);//2
+                insert.setInt(17,1);//3
+                insert.setInt(19,1);//4
+                insert.setInt(21,1);//5
+                insert.setInt(23,1);//6
+                insert.setInt(25,1);//7
+                insert.setInt(27,1);//8
+                insert.setInt(29,1);//9
+                insert.setInt(31,1);//10
+
+                insert.executeUpdate();
+
+            }
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+    }
+}
Index: src/main/java/talsapi/talsapi/mysql/Guardian.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/mysql/Guardian.java	(date 1519521743837)
+++ src/main/java/talsapi/talsapi/mysql/Guardian.java	(date 1519521743837)
@@ -0,0 +1,166 @@
+package talsapi.talsapi.mysql;
+
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import talsapi.talsapi.MySQLs;
+import talsapi.talsapi.TALSAPI;
+
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.UUID;
+
+public class Guardian {
+    TALSAPI plugin = TALSAPI.getPlugin(TALSAPI.class);
+    String prefix = "§e≪§cT§6A§aL§bS §9API§e≫ ";
+    private String table = "Guardian";
+
+    //テーブル
+    public void setTable()
+    {
+        try {
+            //Detabase設定をしていない場合の処理
+            if(MySQLs.getConnection() == null)
+            {
+                return;
+            }
+
+            //テーブルを作る
+            PreparedStatement statement = MySQLs.getConnection().prepareStatement("USE "+ MySQLs.getDetabase());
+            statement.executeUpdate("CREATE TABLE IF NOT EXISTS `"+table+"` (" +
+                    "`UUID` TEXT," +
+                    "`Level` int," +
+                    "`Exp` double," +
+                    "`MaxHealth` double," +
+                    "`MaxMP` int," +
+                    "`SP` int," +
+                    "`StatsMaxHealth` int," +
+                    "`StatsMaxMP` int," +
+                    "`StatsAttackDamage` int," +
+                    "`StatsSkillDamage` int," +
+                    "`StatsSpeed` int," +
+                    "`skill1` boolean,"+
+                    "`skillLevel1` int,"+
+                    "`skill2` boolean,"+
+                    "`skillLevel2` int,"+
+                    "`skill3` boolean,"+
+                    "`skillLevel3` int,"+
+                    "`skill4` boolean,"+
+                    "`skillLevel4` int,"+
+                    "`skill5` boolean,"+
+                    "`skillLevel5` int,"+
+                    "`skill6` boolean,"+
+                    "`skillLevel6` int,"+
+                    "`skill7` boolean,"+
+                    "`skillLevel7` int,"+
+                    "`skill8` boolean,"+
+                    "`skillLevel8` int,"+
+                    "`skill9` boolean,"+
+                    "`skillLevel9` int,"+
+                    "`skill10` boolean,"+
+                    "`skillLevel10` int"+
+                    ")");
+
+            Bukkit.getConsoleSender().sendMessage(prefix+"§aLoad "+table+" TABLE");
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    //プレイやデータが損座しているか
+    private boolean playerExists(Player p)
+    {
+
+        UUID uuid = p.getUniqueId();
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement("SELECT * FROM "+table+" WHERE UUID=?");
+            statment.setString(1,uuid.toString());
+
+            ResultSet results = statment.executeQuery();
+            if(results.next())
+            {
+                return true;
+            }
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        return false;
+    }
+
+    //プレイヤーデータを作成
+    public void createPlayerDeta(Player p)
+    {
+        UUID uuid = p.getUniqueId();
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM "+table+" WHERE UUID=?");
+            statment.setString(1, uuid.toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            if(!playerExists(p))
+            {
+                //LOAD
+                PreparedStatement insert = MySQLs.getConnection().prepareStatement(
+                        "INSERT INTO " + table + "(UUID,Level,Exp,MaxHealth,MaxMP,SP," +
+                                "StatsMaxHealth,StatsMaxMP,StatsSkillDamage,StatsAttackDamage,StatsSpeed,"+
+                                "Skill1,SkillLevel1," +
+                                "Skill2,SkillLevel2," +
+                                "Skill3,SkillLevel3," +
+                                "Skill4,SkillLevel4," +
+                                "Skill5,SkillLevel5," +
+                                "Skill6,SkillLevel6," +
+                                "Skill7,SkillLevel7," +
+                                "Skill8,SkillLevel8," +
+                                "Skill9,SkillLevel9," +
+                                "Skill10,SkillLevel10" +
+                                ") " +
+                                "VALUE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
+                //セット
+                insert.setString(1,uuid.toString());//UUID
+                insert.setInt(2,1);//LEVEL
+                insert.setDouble(3,0.0);//EXP
+                insert.setDouble(4,20.0);//MAXHealth
+                insert.setInt(5,10);//MAX MP
+                insert.setInt(6,0);//SP
+                insert.setInt(7,0);//ADD HP
+                insert.setInt(8,0);//ADD MP
+                insert.setInt(9,0);//ADD SKILL DAMAGE
+                insert.setInt(10,0);//ADD ATTACK DAMAGE
+                insert.setInt(11,0);//ADD SPEED
+
+                insert.setBoolean(12,false);//1
+                insert.setBoolean(14,false);//2
+                insert.setBoolean(16,false);//3
+                insert.setBoolean(18,false);//4
+                insert.setBoolean(20,false);//5
+                insert.setBoolean(22,false);//6
+                insert.setBoolean(24,false);//7
+                insert.setBoolean(26,false);//8
+                insert.setBoolean(28,false);//9
+                insert.setBoolean(30,false);//10
+
+                insert.setInt(13,1);//1
+                insert.setInt(15,1);//2
+                insert.setInt(17,1);//3
+                insert.setInt(19,1);//4
+                insert.setInt(21,1);//5
+                insert.setInt(23,1);//6
+                insert.setInt(25,1);//7
+                insert.setInt(27,1);//8
+                insert.setInt(29,1);//9
+                insert.setInt(31,1);//10
+
+                insert.executeUpdate();
+
+            }
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+    }
+}
Index: src/main/java/talsapi/talsapi/mysql/Hunter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/mysql/Hunter.java	(date 1519521743738)
+++ src/main/java/talsapi/talsapi/mysql/Hunter.java	(date 1519521743738)
@@ -0,0 +1,167 @@
+package talsapi.talsapi.mysql;
+
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import talsapi.talsapi.MySQLs;
+import talsapi.talsapi.TALSAPI;
+
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.UUID;
+
+public class Hunter {
+
+    TALSAPI plugin = TALSAPI.getPlugin(TALSAPI.class);
+    String prefix = "§e≪§cT§6A§aL§bS §9API§e≫ ";
+    private String table = "Hunter";
+
+    //テーブル
+    public void setTable()
+    {
+        try {
+            //Detabase設定をしていない場合の処理
+            if(MySQLs.getConnection() == null)
+            {
+                return;
+            }
+
+            //テーブルを作る
+            PreparedStatement statement = MySQLs.getConnection().prepareStatement("USE "+ MySQLs.getDetabase());
+            statement.executeUpdate("CREATE TABLE IF NOT EXISTS `"+table+"` (" +
+                    "`UUID` TEXT," +
+                    "`Level` int," +
+                    "`Exp` double," +
+                    "`MaxHealth` double," +
+                    "`MaxMP` int," +
+                    "`SP` int," +
+                    "`StatsMaxHealth` int," +
+                    "`StatsMaxMP` int," +
+                    "`StatsAttackDamage` int," +
+                    "`StatsSkillDamage` int," +
+                    "`StatsSpeed` int," +
+                    "`skill1` boolean,"+
+                    "`skillLevel1` int,"+
+                    "`skill2` boolean,"+
+                    "`skillLevel2` int,"+
+                    "`skill3` boolean,"+
+                    "`skillLevel3` int,"+
+                    "`skill4` boolean,"+
+                    "`skillLevel4` int,"+
+                    "`skill5` boolean,"+
+                    "`skillLevel5` int,"+
+                    "`skill6` boolean,"+
+                    "`skillLevel6` int,"+
+                    "`skill7` boolean,"+
+                    "`skillLevel7` int,"+
+                    "`skill8` boolean,"+
+                    "`skillLevel8` int,"+
+                    "`skill9` boolean,"+
+                    "`skillLevel9` int,"+
+                    "`skill10` boolean,"+
+                    "`skillLevel10` int"+
+                    ")");
+
+            Bukkit.getConsoleSender().sendMessage(prefix+"§aLoad "+table+" TABLE");
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    //プレイやデータが損座しているか
+    private boolean playerExists(Player p)
+    {
+
+        UUID uuid = p.getUniqueId();
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement("SELECT * FROM "+table+" WHERE UUID=?");
+            statment.setString(1,uuid.toString());
+
+            ResultSet results = statment.executeQuery();
+            if(results.next())
+            {
+                return true;
+            }
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        return false;
+    }
+
+    //プレイヤーデータを作成
+    public void createPlayerDeta(Player p)
+    {
+        UUID uuid = p.getUniqueId();
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM "+table+" WHERE UUID=?");
+            statment.setString(1, uuid.toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            if(!playerExists(p))
+            {
+                //LOAD
+                PreparedStatement insert = MySQLs.getConnection().prepareStatement(
+                        "INSERT INTO " + table + "(UUID,Level,Exp,MaxHealth,MaxMP,SP," +
+                                "StatsMaxHealth,StatsMaxMP,StatsSkillDamage,StatsAttackDamage,StatsSpeed,"+
+                                "Skill1,SkillLevel1," +
+                                "Skill2,SkillLevel2," +
+                                "Skill3,SkillLevel3," +
+                                "Skill4,SkillLevel4," +
+                                "Skill5,SkillLevel5," +
+                                "Skill6,SkillLevel6," +
+                                "Skill7,SkillLevel7," +
+                                "Skill8,SkillLevel8," +
+                                "Skill9,SkillLevel9," +
+                                "Skill10,SkillLevel10" +
+                                ") " +
+                                "VALUE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
+                //セット
+                insert.setString(1,uuid.toString());//UUID
+                insert.setInt(2,1);//LEVEL
+                insert.setDouble(3,0.0);//EXP
+                insert.setDouble(4,20.0);//MAXHealth
+                insert.setInt(5,10);//MAX MP
+                insert.setInt(6,0);//SP
+                insert.setInt(7,0);//ADD HP
+                insert.setInt(8,0);//ADD MP
+                insert.setInt(9,0);//ADD SKILL DAMAGE
+                insert.setInt(10,0);//ADD ATTACK DAMAGE
+                insert.setInt(11,0);//ADD SPEED
+
+                insert.setBoolean(12,false);//1
+                insert.setBoolean(14,false);//2
+                insert.setBoolean(16,false);//3
+                insert.setBoolean(18,false);//4
+                insert.setBoolean(20,false);//5
+                insert.setBoolean(22,false);//6
+                insert.setBoolean(24,false);//7
+                insert.setBoolean(26,false);//8
+                insert.setBoolean(28,false);//9
+                insert.setBoolean(30,false);//10
+
+                insert.setInt(13,1);//1
+                insert.setInt(15,1);//2
+                insert.setInt(17,1);//3
+                insert.setInt(19,1);//4
+                insert.setInt(21,1);//5
+                insert.setInt(23,1);//6
+                insert.setInt(25,1);//7
+                insert.setInt(27,1);//8
+                insert.setInt(29,1);//9
+                insert.setInt(31,1);//10
+
+                insert.executeUpdate();
+
+            }
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+    }
+}
Index: src/main/java/talsapi/talsapi/mysql/MainDeta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/mysql/MainDeta.java	(date 1519529376671)
+++ src/main/java/talsapi/talsapi/mysql/MainDeta.java	(date 1519529376671)
@@ -0,0 +1,101 @@
+package talsapi.talsapi.mysql;
+
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import talsapi.talsapi.MySQLs;
+import talsapi.talsapi.TALSAPI;
+
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.UUID;
+
+public class MainDeta {
+    TALSAPI plugin = TALSAPI.getPlugin(TALSAPI.class);
+    String prefix = "§e≪§cT§6A§aL§bS §9API§e≫ ";
+    private String table = "PlayerDeta";
+
+    //テーブル
+    public void setTable()
+    {
+        try {
+            //Detabase設定をしていない場合の処理
+            if(MySQLs.getConnection() == null)
+            {
+                return;
+            }
+
+            //テーブルを作る
+            PreparedStatement statement = MySQLs.getConnection().prepareStatement("USE "+ MySQLs.getDetabase());
+            statement.executeUpdate("CREATE TABLE IF NOT EXISTS `"+table+"` (" +
+                    "`UUID` TEXT," +
+                    "`Class` int," +
+                    "`NickName` TEXT," +
+                    "`FishingLevel` int," +
+                    "`FishingEXP` double," +
+                    "`Rank` TEXT"+
+                    ")");
+
+            Bukkit.getConsoleSender().sendMessage(prefix+"§aLoad "+table+" TABLE");
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    //プレイやデータが損座しているか
+    public boolean playerExists(Player p)
+    {
+
+        UUID uuid = p.getUniqueId();
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement("SELECT * FROM "+table+" WHERE UUID=?");
+            statment.setString(1,uuid.toString());
+
+            ResultSet results = statment.executeQuery();
+            if(results.next())
+            {
+                return true;
+            }
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        return false;
+    }
+
+    //プレイヤーデータを作成
+    public void createPlayerDeta(Player p)
+    {
+        UUID uuid = p.getUniqueId();
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM "+table+" WHERE UUID=?");
+            statment.setString(1, uuid.toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            if(!playerExists(p))
+            {
+                //LOAD
+                PreparedStatement insert = MySQLs.getConnection().prepareStatement(
+                        "INSERT INTO " + table + "(UUID,Class,NickName,FishingLevel,FishingEXP,Rank) VALUE (?,?,?,?,?,?)");
+                //セット
+                insert.setString(1,uuid.toString());
+                insert.setInt(2,0);
+                insert.setString(3, p.getName());
+                insert.setInt(4,1);
+                insert.setDouble(5,0.0);
+                insert.setString(6,"");
+
+                insert.executeUpdate();
+
+            }
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+    }
+}
Index: src/main/java/talsapi/talsapi/mysql/Necromancer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/mysql/Necromancer.java	(date 1519521743885)
+++ src/main/java/talsapi/talsapi/mysql/Necromancer.java	(date 1519521743885)
@@ -0,0 +1,167 @@
+package talsapi.talsapi.mysql;
+
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import talsapi.talsapi.MySQLs;
+import talsapi.talsapi.TALSAPI;
+
+import java.sql.Array;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.UUID;
+
+public class Necromancer {
+    TALSAPI plugin = TALSAPI.getPlugin(TALSAPI.class);
+    String prefix = "§e≪§cT§6A§aL§bS §9API§e≫ ";
+    private String table = "Necromancer";
+
+    //テーブル
+    public void setTable()
+    {
+        try {
+            //Detabase設定をしていない場合の処理
+            if(MySQLs.getConnection() == null)
+            {
+                return;
+            }
+
+            //テーブルを作る
+            PreparedStatement statement = MySQLs.getConnection().prepareStatement("USE "+ MySQLs.getDetabase());
+            statement.executeUpdate("CREATE TABLE IF NOT EXISTS `"+table+"` (" +
+                    "`UUID` TEXT," +
+                    "`Level` int," +
+                    "`Exp` double," +
+                    "`MaxHealth` double," +
+                    "`MaxMP` int," +
+                    "`SP` int," +
+                    "`StatsMaxHealth` int," +
+                    "`StatsMaxMP` int," +
+                    "`StatsAttackDamage` int," +
+                    "`StatsSkillDamage` int," +
+                    "`StatsSpeed` int," +
+                    "`skill1` boolean,"+
+                    "`skillLevel1` int,"+
+                    "`skill2` boolean,"+
+                    "`skillLevel2` int,"+
+                    "`skill3` boolean,"+
+                    "`skillLevel3` int,"+
+                    "`skill4` boolean,"+
+                    "`skillLevel4` int,"+
+                    "`skill5` boolean,"+
+                    "`skillLevel5` int,"+
+                    "`skill6` boolean,"+
+                    "`skillLevel6` int,"+
+                    "`skill7` boolean,"+
+                    "`skillLevel7` int,"+
+                    "`skill8` boolean,"+
+                    "`skillLevel8` int,"+
+                    "`skill9` boolean,"+
+                    "`skillLevel9` int,"+
+                    "`skill10` boolean,"+
+                    "`skillLevel10` int"+
+                    ")");
+
+            Bukkit.getConsoleSender().sendMessage(prefix+"§aLoad "+table+" TABLE");
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    //プレイやデータが損座しているか
+    private boolean playerExists(Player p)
+    {
+
+        UUID uuid = p.getUniqueId();
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement("SELECT * FROM "+table+" WHERE UUID=?");
+            statment.setString(1,uuid.toString());
+
+            ResultSet results = statment.executeQuery();
+            if(results.next())
+            {
+                return true;
+            }
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        return false;
+    }
+
+    //プレイヤーデータを作成
+    public void createPlayerDeta(Player p)
+    {
+        UUID uuid = p.getUniqueId();
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM "+table+" WHERE UUID=?");
+            statment.setString(1, uuid.toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            if(!playerExists(p))
+            {
+                //LOAD
+                PreparedStatement insert = MySQLs.getConnection().prepareStatement(
+                        "INSERT INTO " + table + "(UUID,Level,Exp,MaxHealth,MaxMP,SP," +
+                                "StatsMaxHealth,StatsMaxMP,StatsSkillDamage,StatsAttackDamage,StatsSpeed,"+
+                                "Skill1,SkillLevel1," +
+                                "Skill2,SkillLevel2," +
+                                "Skill3,SkillLevel3," +
+                                "Skill4,SkillLevel4," +
+                                "Skill5,SkillLevel5," +
+                                "Skill6,SkillLevel6," +
+                                "Skill7,SkillLevel7," +
+                                "Skill8,SkillLevel8," +
+                                "Skill9,SkillLevel9," +
+                                "Skill10,SkillLevel10" +
+                                ") " +
+                                "VALUE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
+                //セット
+                insert.setString(1,uuid.toString());//UUID
+                insert.setInt(2,1);//LEVEL
+                insert.setDouble(3,0.0);//EXP
+                insert.setDouble(4,30.0);//MAXHealth
+                insert.setInt(5,10);//MAX MP
+                insert.setInt(6,0);//SP
+                insert.setInt(7,0);//ADD HP
+                insert.setInt(8,0);//ADD MP
+                insert.setInt(9,0);//ADD SKILL DAMAGE
+                insert.setInt(10,0);//ADD ATTACK DAMAGE
+                insert.setInt(11,0);//ADD SPEED
+
+                insert.setBoolean(12,false);//1
+                insert.setBoolean(14,false);//2
+                insert.setBoolean(16,false);//3
+                insert.setBoolean(18,false);//4
+                insert.setBoolean(20,false);//5
+                insert.setBoolean(22,false);//6
+                insert.setBoolean(24,false);//7
+                insert.setBoolean(26,false);//8
+                insert.setBoolean(28,false);//9
+                insert.setBoolean(30,false);//10
+
+                insert.setInt(13,1);//1
+                insert.setInt(15,1);//2
+                insert.setInt(17,1);//3
+                insert.setInt(19,1);//4
+                insert.setInt(21,1);//5
+                insert.setInt(23,1);//6
+                insert.setInt(25,1);//7
+                insert.setInt(27,1);//8
+                insert.setInt(29,1);//9
+                insert.setInt(31,1);//10
+
+            }
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+    }
+}
Index: src/main/java/talsapi/talsapi/mysql/Priest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/mysql/Priest.java	(date 1519521743789)
+++ src/main/java/talsapi/talsapi/mysql/Priest.java	(date 1519521743789)
@@ -0,0 +1,166 @@
+package talsapi.talsapi.mysql;
+
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import talsapi.talsapi.MySQLs;
+import talsapi.talsapi.TALSAPI;
+
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.UUID;
+
+public class Priest {
+    TALSAPI plugin = TALSAPI.getPlugin(TALSAPI.class);
+    String prefix = "§e≪§cT§6A§aL§bS §9API§e≫ ";
+    private String table = "Priest";
+
+    //テーブル
+    public void setTable()
+    {
+        try {
+            //Detabase設定をしていない場合の処理
+            if(MySQLs.getConnection() == null)
+            {
+                return;
+            }
+
+            //テーブルを作る
+            PreparedStatement statement = MySQLs.getConnection().prepareStatement("USE "+ MySQLs.getDetabase());
+            statement.executeUpdate("CREATE TABLE IF NOT EXISTS `"+table+"` (" +
+                    "`UUID` TEXT," +
+                    "`Level` int," +
+                    "`Exp` double," +
+                    "`MaxHealth` double," +
+                    "`MaxMP` int," +
+                    "`SP` int," +
+                    "`StatsMaxHealth` int," +
+                    "`StatsMaxMP` int," +
+                    "`StatsAttackDamage` int," +
+                    "`StatsSkillDamage` int," +
+                    "`StatsSpeed` int," +
+                    "`skill1` boolean,"+
+                    "`skillLevel1` int,"+
+                    "`skill2` boolean,"+
+                    "`skillLevel2` int,"+
+                    "`skill3` boolean,"+
+                    "`skillLevel3` int,"+
+                    "`skill4` boolean,"+
+                    "`skillLevel4` int,"+
+                    "`skill5` boolean,"+
+                    "`skillLevel5` int,"+
+                    "`skill6` boolean,"+
+                    "`skillLevel6` int,"+
+                    "`skill7` boolean,"+
+                    "`skillLevel7` int,"+
+                    "`skill8` boolean,"+
+                    "`skillLevel8` int,"+
+                    "`skill9` boolean,"+
+                    "`skillLevel9` int,"+
+                    "`skill10` boolean,"+
+                    "`skillLevel10` int"+
+                    ")");
+
+            Bukkit.getConsoleSender().sendMessage(prefix+"§aLoad "+table+" TABLE");
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    //プレイやデータが損座しているか
+    private boolean playerExists(Player p)
+    {
+
+        UUID uuid = p.getUniqueId();
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement("SELECT * FROM "+table+" WHERE UUID=?");
+            statment.setString(1,uuid.toString());
+
+            ResultSet results = statment.executeQuery();
+            if(results.next())
+            {
+                return true;
+            }
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        return false;
+    }
+
+    //プレイヤーデータを作成
+    public void createPlayerDeta(Player p)
+    {
+        UUID uuid = p.getUniqueId();
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM "+table+" WHERE UUID=?");
+            statment.setString(1, uuid.toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            if(!playerExists(p))
+            {
+                //LOAD
+                PreparedStatement insert = MySQLs.getConnection().prepareStatement(
+                        "INSERT INTO " + table + "(UUID,Level,Exp,MaxHealth,MaxMP,SP," +
+                                "StatsMaxHealth,StatsMaxMP,StatsSkillDamage,StatsAttackDamage,StatsSpeed,"+
+                                "Skill1,SkillLevel1," +
+                                "Skill2,SkillLevel2," +
+                                "Skill3,SkillLevel3," +
+                                "Skill4,SkillLevel4," +
+                                "Skill5,SkillLevel5," +
+                                "Skill6,SkillLevel6," +
+                                "Skill7,SkillLevel7," +
+                                "Skill8,SkillLevel8," +
+                                "Skill9,SkillLevel9," +
+                                "Skill10,SkillLevel10" +
+                                ") " +
+                                "VALUE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
+                //セット
+                insert.setString(1,uuid.toString());//UUID
+                insert.setInt(2,1);//LEVEL
+                insert.setDouble(3,0.0);//EXP
+                insert.setDouble(4,20.0);//MAXHealth
+                insert.setInt(5,10);//MAX MP
+                insert.setInt(6,0);//SP
+                insert.setInt(7,0);//ADD HP
+                insert.setInt(8,0);//ADD MP
+                insert.setInt(9,0);//ADD SKILL DAMAGE
+                insert.setInt(10,0);//ADD ATTACK DAMAGE
+                insert.setInt(11,0);//ADD SPEED
+
+                insert.setBoolean(12,false);//1
+                insert.setBoolean(14,false);//2
+                insert.setBoolean(16,false);//3
+                insert.setBoolean(18,false);//4
+                insert.setBoolean(20,false);//5
+                insert.setBoolean(22,false);//6
+                insert.setBoolean(24,false);//7
+                insert.setBoolean(26,false);//8
+                insert.setBoolean(28,false);//9
+                insert.setBoolean(30,false);//10
+
+                insert.setInt(13,1);//1
+                insert.setInt(15,1);//2
+                insert.setInt(17,1);//3
+                insert.setInt(19,1);//4
+                insert.setInt(21,1);//5
+                insert.setInt(23,1);//6
+                insert.setInt(25,1);//7
+                insert.setInt(27,1);//8
+                insert.setInt(29,1);//9
+                insert.setInt(31,1);//10
+
+                insert.executeUpdate();
+
+            }
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+    }
+}
Index: src/main/java/talsapi/talsapi/mysql/Soldier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/mysql/Soldier.java	(date 1519521743714)
+++ src/main/java/talsapi/talsapi/mysql/Soldier.java	(date 1519521743714)
@@ -0,0 +1,166 @@
+package talsapi.talsapi.mysql;
+
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import talsapi.talsapi.MySQLs;
+import talsapi.talsapi.TALSAPI;
+
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.UUID;
+
+public class Soldier {
+    TALSAPI plugin = TALSAPI.getPlugin(TALSAPI.class);
+    String prefix = "§e≪§cT§6A§aL§bS §9API§e≫ ";
+    private String table = "Soldier";
+
+    //テーブル
+    public void setTable()
+    {
+        try {
+            //Detabase設定をしていない場合の処理
+            if(MySQLs.getConnection() == null)
+            {
+                return;
+            }
+
+            //テーブルを作る
+            PreparedStatement statement = MySQLs.getConnection().prepareStatement("USE "+ MySQLs.getDetabase());
+            statement.executeUpdate("CREATE TABLE IF NOT EXISTS `"+table+"` (" +
+                    "`UUID` TEXT," +
+                    "`Level` int," +
+                    "`Exp` double," +
+                    "`MaxHealth` double," +
+                    "`MaxMP` int," +
+                    "`SP` int," +
+                    "`StatsMaxHealth` int," +
+                    "`StatsMaxMP` int," +
+                    "`StatsAttackDamage` int," +
+                    "`StatsSkillDamage` int," +
+                    "`StatsSpeed` int," +
+                    "`skill1` boolean,"+
+                    "`skillLevel1` int,"+
+                    "`skill2` boolean,"+
+                    "`skillLevel2` int,"+
+                    "`skill3` boolean,"+
+                    "`skillLevel3` int,"+
+                    "`skill4` boolean,"+
+                    "`skillLevel4` int,"+
+                    "`skill5` boolean,"+
+                    "`skillLevel5` int,"+
+                    "`skill6` boolean,"+
+                    "`skillLevel6` int,"+
+                    "`skill7` boolean,"+
+                    "`skillLevel7` int,"+
+                    "`skill8` boolean,"+
+                    "`skillLevel8` int,"+
+                    "`skill9` boolean,"+
+                    "`skillLevel9` int,"+
+                    "`skill10` boolean,"+
+                    "`skillLevel10` int"+
+                    ")");
+
+            Bukkit.getConsoleSender().sendMessage(prefix+"§aLoad "+table+" TABLE");
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    //プレイやデータが損座しているか
+    private boolean playerExists(Player p)
+    {
+
+        UUID uuid = p.getUniqueId();
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement("SELECT * FROM "+table+" WHERE UUID=?");
+            statment.setString(1,uuid.toString());
+
+            ResultSet results = statment.executeQuery();
+            if(results.next())
+            {
+                return true;
+            }
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        return false;
+    }
+
+    //プレイヤーデータを作成
+    public void createPlayerDeta(Player p)
+    {
+        UUID uuid = p.getUniqueId();
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM "+table+" WHERE UUID=?");
+            statment.setString(1, uuid.toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            if(!playerExists(p))
+            {
+                //LOAD
+                PreparedStatement insert = MySQLs.getConnection().prepareStatement(
+                        "INSERT INTO " + table + "(UUID,Level,Exp,MaxHealth,MaxMP,SP," +
+                                "StatsMaxHealth,StatsMaxMP,StatsSkillDamage,StatsAttackDamage,StatsSpeed,"+
+                                "Skill1,SkillLevel1," +
+                                "Skill2,SkillLevel2," +
+                                "Skill3,SkillLevel3," +
+                                "Skill4,SkillLevel4," +
+                                "Skill5,SkillLevel5," +
+                                "Skill6,SkillLevel6," +
+                                "Skill7,SkillLevel7," +
+                                "Skill8,SkillLevel8," +
+                                "Skill9,SkillLevel9," +
+                                "Skill10,SkillLevel10" +
+                                ") " +
+                                "VALUE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
+                //セット
+                insert.setString(1,uuid.toString());//UUID
+                insert.setInt(2,1);//LEVEL
+                insert.setDouble(3,0.0);//EXP
+                insert.setDouble(4,20.0);//MAXHealth
+                insert.setInt(5,10);//MAX MP
+                insert.setInt(6,0);//SP
+                insert.setInt(7,0);//ADD HP
+                insert.setInt(8,0);//ADD MP
+                insert.setInt(9,0);//ADD SKILL DAMAGE
+                insert.setInt(10,0);//ADD ATTACK DAMAGE
+                insert.setInt(11,0);//ADD SPEED
+
+                insert.setBoolean(12,false);//1
+                insert.setBoolean(14,false);//2
+                insert.setBoolean(16,false);//3
+                insert.setBoolean(18,false);//4
+                insert.setBoolean(20,false);//5
+                insert.setBoolean(22,false);//6
+                insert.setBoolean(24,false);//7
+                insert.setBoolean(26,false);//8
+                insert.setBoolean(28,false);//9
+                insert.setBoolean(30,false);//10
+
+                insert.setInt(13,1);//1
+                insert.setInt(15,1);//2
+                insert.setInt(17,1);//3
+                insert.setInt(19,1);//4
+                insert.setInt(21,1);//5
+                insert.setInt(23,1);//6
+                insert.setInt(25,1);//7
+                insert.setInt(27,1);//8
+                insert.setInt(29,1);//9
+                insert.setInt(31,1);//10
+
+                insert.executeUpdate();
+
+            }
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+    }
+}
Index: src/main/java/talsapi/talsapi/mysql/Thief.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/mysql/Thief.java	(date 1519521743861)
+++ src/main/java/talsapi/talsapi/mysql/Thief.java	(date 1519521743861)
@@ -0,0 +1,166 @@
+package talsapi.talsapi.mysql;
+
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import talsapi.talsapi.MySQLs;
+import talsapi.talsapi.TALSAPI;
+
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.UUID;
+
+public class Thief {
+    TALSAPI plugin = TALSAPI.getPlugin(TALSAPI.class);
+    String prefix = "§e≪§cT§6A§aL§bS §9API§e≫ ";
+    private String table = "Thief";
+
+    //テーブル
+    public void setTable()
+    {
+        try {
+            //Detabase設定をしていない場合の処理
+            if(MySQLs.getConnection() == null)
+            {
+                return;
+            }
+
+            //テーブルを作る
+            PreparedStatement statement = MySQLs.getConnection().prepareStatement("USE "+ MySQLs.getDetabase());
+            statement.executeUpdate("CREATE TABLE IF NOT EXISTS `"+table+"` (" +
+                    "`UUID` TEXT," +
+                    "`Level` int," +
+                    "`Exp` double," +
+                    "`MaxHealth` double," +
+                    "`MaxMP` int," +
+                    "`SP` int," +
+                    "`StatsMaxHealth` int," +
+                    "`StatsMaxMP` int," +
+                    "`StatsAttackDamage` int," +
+                    "`StatsSkillDamage` int," +
+                    "`StatsSpeed` int," +
+                    "`skill1` boolean,"+
+                    "`skillLevel1` int,"+
+                    "`skill2` boolean,"+
+                    "`skillLevel2` int,"+
+                    "`skill3` boolean,"+
+                    "`skillLevel3` int,"+
+                    "`skill4` boolean,"+
+                    "`skillLevel4` int,"+
+                    "`skill5` boolean,"+
+                    "`skillLevel5` int,"+
+                    "`skill6` boolean,"+
+                    "`skillLevel6` int,"+
+                    "`skill7` boolean,"+
+                    "`skillLevel7` int,"+
+                    "`skill8` boolean,"+
+                    "`skillLevel8` int,"+
+                    "`skill9` boolean,"+
+                    "`skillLevel9` int,"+
+                    "`skill10` boolean,"+
+                    "`skillLevel10` int"+
+                    ")");
+
+            Bukkit.getConsoleSender().sendMessage(prefix+"§aLoad "+table+" TABLE");
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    //プレイやデータが損座しているか
+    private boolean playerExists(Player p)
+    {
+
+        UUID uuid = p.getUniqueId();
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement("SELECT * FROM "+table+" WHERE UUID=?");
+            statment.setString(1,uuid.toString());
+
+            ResultSet results = statment.executeQuery();
+            if(results.next())
+            {
+                return true;
+            }
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        return false;
+    }
+
+    //プレイヤーデータを作成
+    public void createPlayerDeta(Player p)
+    {
+        UUID uuid = p.getUniqueId();
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM "+table+" WHERE UUID=?");
+            statment.setString(1, uuid.toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            if(!playerExists(p))
+            {
+                //LOAD
+                PreparedStatement insert = MySQLs.getConnection().prepareStatement(
+                        "INSERT INTO " + table + "(UUID,Level,Exp,MaxHealth,MaxMP,SP," +
+                                "StatsMaxHealth,StatsMaxMP,StatsSkillDamage,StatsAttackDamage,StatsSpeed,"+
+                                "Skill1,SkillLevel1," +
+                                "Skill2,SkillLevel2," +
+                                "Skill3,SkillLevel3," +
+                                "Skill4,SkillLevel4," +
+                                "Skill5,SkillLevel5," +
+                                "Skill6,SkillLevel6," +
+                                "Skill7,SkillLevel7," +
+                                "Skill8,SkillLevel8," +
+                                "Skill9,SkillLevel9," +
+                                "Skill10,SkillLevel10" +
+                                ") " +
+                                "VALUE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
+                //セット
+                insert.setString(1,uuid.toString());//UUID
+                insert.setInt(2,1);//LEVEL
+                insert.setDouble(3,0.0);//EXP
+                insert.setDouble(4,20.0);//MAXHealth
+                insert.setInt(5,10);//MAX MP
+                insert.setInt(6,0);//SP
+                insert.setInt(7,0);//ADD HP
+                insert.setInt(8,0);//ADD MP
+                insert.setInt(9,0);//ADD SKILL DAMAGE
+                insert.setInt(10,0);//ADD ATTACK DAMAGE
+                insert.setInt(11,0);//ADD SPEED
+
+                insert.setBoolean(12,false);//1
+                insert.setBoolean(14,false);//2
+                insert.setBoolean(16,false);//3
+                insert.setBoolean(18,false);//4
+                insert.setBoolean(20,false);//5
+                insert.setBoolean(22,false);//6
+                insert.setBoolean(24,false);//7
+                insert.setBoolean(26,false);//8
+                insert.setBoolean(28,false);//9
+                insert.setBoolean(30,false);//10
+
+                insert.setInt(13,1);//1
+                insert.setInt(15,1);//2
+                insert.setInt(17,1);//3
+                insert.setInt(19,1);//4
+                insert.setInt(21,1);//5
+                insert.setInt(23,1);//6
+                insert.setInt(25,1);//7
+                insert.setInt(27,1);//8
+                insert.setInt(29,1);//9
+                insert.setInt(31,1);//10
+
+                insert.executeUpdate();
+
+            }
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+    }
+}
Index: src/main/java/talsapi/talsapi/mysql/Wizard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/mysql/Wizard.java	(date 1519521743764)
+++ src/main/java/talsapi/talsapi/mysql/Wizard.java	(date 1519521743764)
@@ -0,0 +1,166 @@
+package talsapi.talsapi.mysql;
+
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import talsapi.talsapi.MySQLs;
+import talsapi.talsapi.TALSAPI;
+
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.UUID;
+
+public class Wizard {
+    TALSAPI plugin = TALSAPI.getPlugin(TALSAPI.class);
+    String prefix = "§e≪§cT§6A§aL§bS §9API§e≫ ";
+    private String table = "Wizard";
+
+    //テーブル
+    public void setTable()
+    {
+        try {
+            //Detabase設定をしていない場合の処理
+            if(MySQLs.getConnection() == null)
+            {
+                return;
+            }
+
+            //テーブルを作る
+            PreparedStatement statement = MySQLs.getConnection().prepareStatement("USE "+ MySQLs.getDetabase());
+            statement.executeUpdate("CREATE TABLE IF NOT EXISTS `"+table+"` (" +
+                    "`UUID` TEXT," +
+                    "`Level` int," +
+                    "`Exp` double," +
+                    "`MaxHealth` double," +
+                    "`MaxMP` int," +
+                    "`SP` int," +
+                    "`StatsMaxHealth` int," +
+                    "`StatsMaxMP` int," +
+                    "`StatsAttackDamage` int," +
+                    "`StatsSkillDamage` int," +
+                    "`StatsSpeed` int," +
+                    "`skill1` boolean,"+
+                    "`skillLevel1` int,"+
+                    "`skill2` boolean,"+
+                    "`skillLevel2` int,"+
+                    "`skill3` boolean,"+
+                    "`skillLevel3` int,"+
+                    "`skill4` boolean,"+
+                    "`skillLevel4` int,"+
+                    "`skill5` boolean,"+
+                    "`skillLevel5` int,"+
+                    "`skill6` boolean,"+
+                    "`skillLevel6` int,"+
+                    "`skill7` boolean,"+
+                    "`skillLevel7` int,"+
+                    "`skill8` boolean,"+
+                    "`skillLevel8` int,"+
+                    "`skill9` boolean,"+
+                    "`skillLevel9` int,"+
+                    "`skill10` boolean,"+
+                    "`skillLevel10` int"+
+                    ")");
+
+            Bukkit.getConsoleSender().sendMessage(prefix+"§aLoad "+table+" TABLE");
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    //プレイやデータが損座しているか
+    private boolean playerExists(Player p)
+    {
+
+        UUID uuid = p.getUniqueId();
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement("SELECT * FROM "+table+" WHERE UUID=?");
+            statment.setString(1,uuid.toString());
+
+            ResultSet results = statment.executeQuery();
+            if(results.next())
+            {
+                return true;
+            }
+
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        return false;
+    }
+
+    //プレイヤーデータを作成
+    public void createPlayerDeta(Player p)
+    {
+        UUID uuid = p.getUniqueId();
+
+        try {
+            PreparedStatement statment = MySQLs.getConnection().prepareStatement(
+                    "SELECT * FROM "+table+" WHERE UUID=?");
+            statment.setString(1, uuid.toString());
+            ResultSet results = statment.executeQuery();
+            results.next();
+            if(!playerExists(p))
+            {
+                //LOAD
+                PreparedStatement insert = MySQLs.getConnection().prepareStatement(
+                        "INSERT INTO " + table + "(UUID,Level,Exp,MaxHealth,MaxMP,SP," +
+                                "StatsMaxHealth,StatsMaxMP,StatsSkillDamage,StatsAttackDamage,StatsSpeed,"+
+                                "Skill1,SkillLevel1," +
+                                "Skill2,SkillLevel2," +
+                                "Skill3,SkillLevel3," +
+                                "Skill4,SkillLevel4," +
+                                "Skill5,SkillLevel5," +
+                                "Skill6,SkillLevel6," +
+                                "Skill7,SkillLevel7," +
+                                "Skill8,SkillLevel8," +
+                                "Skill9,SkillLevel9," +
+                                "Skill10,SkillLevel10" +
+                                ") " +
+                                "VALUE (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
+                //セット
+                insert.setString(1,uuid.toString());//UUID
+                insert.setInt(2,1);//LEVEL
+                insert.setDouble(3,0.0);//EXP
+                insert.setDouble(4,20.0);//MAXHealth
+                insert.setInt(5,10);//MAX MP
+                insert.setInt(6,0);//SP
+                insert.setInt(7,0);//ADD HP
+                insert.setInt(8,0);//ADD MP
+                insert.setInt(9,0);//ADD SKILL DAMAGE
+                insert.setInt(10,0);//ADD ATTACK DAMAGE
+                insert.setInt(11,0);//ADD SPEED
+
+                insert.setBoolean(12,false);//1
+                insert.setBoolean(14,false);//2
+                insert.setBoolean(16,false);//3
+                insert.setBoolean(18,false);//4
+                insert.setBoolean(20,false);//5
+                insert.setBoolean(22,false);//6
+                insert.setBoolean(24,false);//7
+                insert.setBoolean(26,false);//8
+                insert.setBoolean(28,false);//9
+                insert.setBoolean(30,false);//10
+
+                insert.setInt(13,1);//1
+                insert.setInt(15,1);//2
+                insert.setInt(17,1);//3
+                insert.setInt(19,1);//4
+                insert.setInt(21,1);//5
+                insert.setInt(23,1);//6
+                insert.setInt(25,1);//7
+                insert.setInt(27,1);//8
+                insert.setInt(29,1);//9
+                insert.setInt(31,1);//10
+
+                insert.executeUpdate();
+
+            }
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+    }
+}
Index: src/main/java/talsapi/talsapi/MySQLs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/MySQLs.java	(date 1519479665818)
+++ src/main/java/talsapi/talsapi/MySQLs.java	(date 1519479665818)
@@ -0,0 +1,115 @@
+package talsapi.talsapi;
+
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import org.bukkit.plugin.Plugin;
+import talsapi.talsapi.api.PlayerDeta;
+import talsapi.talsapi.mysql.*;
+
+import java.sql.*;
+
+public class MySQLs {
+
+    static TALSAPI plugin = TALSAPI.getPlugin(TALSAPI.class);
+    static String prefix = "§e≪§cT§6A§aL§bS §9API§e≫ ";
+
+    private static Connection connection;
+    private static String host, database, username, password, table;
+    private static int port;
+
+    public static void mysqlSetup()
+    {
+        //Configに書き込まれてない場合
+        if(plugin.getConfig().getString("host") == null||
+                plugin.getConfig().getInt("port") == 0||
+                plugin.getConfig().getString("detabase") == null||
+                plugin.getConfig().getString("username") == null||
+                plugin.getConfig().getString("password") == null)
+        {
+            return;
+        }
+
+        host = plugin.getConfig().getString("host");
+        port = plugin.getConfig().getInt("port");
+        database = plugin.getConfig().getString("detabase");
+        username = plugin.getConfig().getString("username");
+        password = plugin.getConfig().getString("password");
+        table = "talsapi";
+
+        //Connectionを設定する
+        try {
+            synchronized (new MySQLs()) {
+                if (getConnection() != null && !getConnection().isClosed()) {
+                    return;
+                }
+
+                Class.forName("com.mysql.jdbc.Driver");
+                setConnection(
+                        DriverManager.getConnection("jdbc:mysql://" + host + ":" + port + "/" + database,
+                                username, password));
+
+                Bukkit.getConsoleSender().sendMessage(prefix+"§aCONNECTED");
+
+            }
+        } catch (SQLException | ClassNotFoundException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public static Connection getConnection() {
+        return connection;
+    }
+
+    private static void setConnection(Connection connection) {
+        MySQLs.connection = connection;
+    }
+
+    public static String getDetabase()
+    {
+        return database;
+    }
+
+    //テーブルを作る関数
+    public static void setTables()
+    {
+        new Assassin().setTable();
+        new Guardian().setTable();
+        new Hunter().setTable();
+        new Necromancer().setTable();
+        new Priest().setTable();
+        new Soldier().setTable();
+        new Thief().setTable();
+        new Wizard().setTable();
+        new MainDeta().setTable();
+    }
+
+    public static void PluginStop()
+    {
+        //Mysqlとつなげなかった場合プラグインをストップさせる
+        if(getConnection() == null)
+        {
+            Bukkit.getConsoleSender().sendMessage(prefix+"§4NOT CONNECT");
+            plugin.onDisable();
+            plugin.getServer().getPluginManager().disablePlugin(plugin.getServer().getPluginManager().getPlugin(plugin.getName()));
+        }
+    }
+
+    public static void createPlayreDetas(Player p)
+    {
+        //Mysqlとつなげなかった場合プラグインをストップさせる
+        if(getConnection() == null)
+        {
+            Bukkit.getConsoleSender().sendMessage(prefix+"§4NOT CONNECT");
+            plugin.onDisable();
+        }
+        new Assassin().createPlayerDeta(p);
+        new Guardian().createPlayerDeta(p);
+        new Hunter().createPlayerDeta(p);
+        new Necromancer().createPlayerDeta(p);
+        new Priest().createPlayerDeta(p);
+        new Soldier().createPlayerDeta(p);
+        new Thief().createPlayerDeta(p);
+        new Wizard().createPlayerDeta(p);
+        new MainDeta().createPlayerDeta(p);
+    }
+}
Index: src/main/java/talsapi/talsapi/TALSAPI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/talsapi/talsapi/TALSAPI.java	(date 1519739983535)
+++ src/main/java/talsapi/talsapi/TALSAPI.java	(date 1519739983535)
@@ -0,0 +1,60 @@
+package talsapi.talsapi;
+
+import org.bukkit.Bukkit;
+import org.bukkit.event.Listener;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.bukkit.entity.Player;
+import talsapi.talsapi.api.MySQLAPI;
+import talsapi.talsapi.api.PlayerDeta;
+import talsapi.talsapi.listener.PlayerJoinSet;
+
+public final class TALSAPI extends JavaPlugin implements Listener {
+
+    private PlayerJoinSet pjs;
+    public MySQLs mysql;
+    private String prefix = "§e≪§cT§6A§aL§bS §9API§e≫ ";
+
+    /*
+    ソルジャー : 1
+    ウィザード : 2
+    ガーディアン : 3
+    シーフ : 4
+    ハンター : 5
+    アサシン : 6
+    ネクロマンサー : 7
+    プリースト : 8
+     */
+    @Override
+    public void onEnable() {
+
+        //LOADメッセージ開始
+        Bukkit.getConsoleSender().sendMessage(prefix+"§aLoading API");
+
+        //getServer().getPluginManager().registerEvents(this,this);
+
+        //Myqslの読み込み
+        MySQLs.mysqlSetup();
+        MySQLs.setTables();
+
+        //コンフィグをロード
+        saveDefaultConfig();
+
+        //クラスを読み込む
+        pjs = new PlayerJoinSet();
+
+        //Mysql読み込み失敗時
+        MySQLs.PluginStop();
+
+        //LOADメッセージ終了
+        Bukkit.getConsoleSender().sendMessage(prefix+"§aFinish loading API");
+
+    }
+
+    @Override
+    public void onDisable() {
+    }
+
+    public static PlayerDeta getPlayerDeta(Player p){ return new PlayerDeta(p); }
+    public static MySQLAPI getMySQL(Player p){ return new MySQLAPI(); }
+
+}
Index: src/main/resources/config.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/config.yml	(date 1519435946908)
+++ src/main/resources/config.yml	(date 1519435946908)
@@ -0,0 +1,6 @@
+#MySQLの設定
+host: ''
+port: 0
+detabase: ''
+username: ''
+password: ''
\ No newline at end of file
Index: src/main/resources/plugin.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/plugin.yml	(date 1519472114946)
+++ src/main/resources/plugin.yml	(date 1519472114946)
@@ -0,0 +1,3 @@
+name: TALSAPI
+version: ${project.version}
+main: talsapi.talsapi.TALSAPI
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(date 1519641649165)
+++ pom.xml	(date 1519641649165)
@@ -0,0 +1,79 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>TALSAPI</groupId>
+    <artifactId>TALSAPI</artifactId>
+    <version>1.0.2-SNAPSHOT</version>
+    <packaging>jar</packaging>
+
+    <name>TalsAPI</name>
+
+    <properties>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+    <build>
+        <defaultGoal>clean package</defaultGoal>
+        <plugins>
+            <plugin>
+                <version>3.6.1</version>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <configuration>
+                    <source>1.8</source>
+                    <target>1.8</target>
+                </configuration>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-shade-plugin</artifactId>
+                <version>3.0.0</version>
+                <executions>
+                    <execution>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>shade</goal>
+                        </goals>
+                        <configuration>
+                            <minimizeJar>true</minimizeJar>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+        <resources>
+            <resource>
+                <directory>src/main/resources</directory>
+                <filtering>true</filtering>
+            </resource>
+        </resources>
+    </build>
+
+    <repositories>
+        <repository>
+            <id>spigotmc-repo</id>
+            <url>https://hub.spigotmc.org/nexus/content/groups/public/</url>
+        </repository>
+        <repository>
+            <id>sonatype</id>
+            <url>https://oss.sonatype.org/content/groups/public/</url>
+        </repository>
+    </repositories>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.spigotmc</groupId>
+            <artifactId>spigot-api</artifactId>
+            <version>1.12-R0.1-SNAPSHOT</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.bukkit</groupId>
+            <artifactId>bukkit</artifactId>
+            <version>1.10.2-R0.1-SNAPSHOT</version>
+        </dependency>
+    </dependencies>
+</project>
Index: TALSAPI.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TALSAPI.iml	(date 1519461818302)
+++ TALSAPI.iml	(date 1519461818302)
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
+  <component name="FacetManager">
+    <facet type="minecraft" name="Minecraft">
+      <configuration>
+        <autoDetectTypes>
+          <platformType>SPIGOT</platformType>
+        </autoDetectTypes>
+      </configuration>
+    </facet>
+  </component>
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_8">
+    <output url="file://$MODULE_DIR$/target/classes" />
+    <output-test url="file://$MODULE_DIR$/target/test-classes" />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" type="java-test-resource" />
+      <excludeFolder url="file://$MODULE_DIR$/target" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="spigot1" level="project" />
+    <orderEntry type="library" scope="PROVIDED" name="Maven: org.spigotmc:spigot-api:1.12-R0.1-SNAPSHOT" level="project" />
+    <orderEntry type="library" name="Maven: commons-lang:commons-lang:2.6" level="project" />
+    <orderEntry type="library" name="Maven: com.googlecode.json-simple:json-simple:1.1.1" level="project" />
+    <orderEntry type="library" name="Maven: junit:junit:4.10" level="project" />
+    <orderEntry type="library" name="Maven: org.hamcrest:hamcrest-core:1.1" level="project" />
+    <orderEntry type="library" name="Maven: com.google.guava:guava:21.0" level="project" />
+    <orderEntry type="library" name="Maven: com.google.code.gson:gson:2.8.0" level="project" />
+    <orderEntry type="library" name="Maven: org.yaml:snakeyaml:1.18" level="project" />
+    <orderEntry type="library" scope="PROVIDED" name="Maven: net.md-5:bungeecord-chat:1.12-SNAPSHOT" level="project" />
+    <orderEntry type="library" name="Maven: org.bukkit:bukkit:1.10.2-R0.1-SNAPSHOT" level="project" />
+    <orderEntry type="library" name="Maven: org.avaje:ebean:2.8.1" level="project" />
+    <orderEntry type="library" name="Maven: javax.persistence:persistence-api:1.0" level="project" />
+  </component>
+</module>
\ No newline at end of file
